# Stubs for sqlalchemy.dialects.postgresql.array (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any as _Any, Optional
from .base import ischema_names as ischema_names
from ...sql import expression as expression, operators as operators
from ...sql.base import SchemaEventTarget as SchemaEventTarget
from ... import types as sqltypes
from uuid import UUID as _python_UUID

def Any(other, arrexpr, operator: _Any = ...): ...
def All(other, arrexpr, operator: _Any = ...): ...

class array(expression.Tuple):
    __visit_name__ = ...  # type: str
    type = ...  # type: _Any
    def __init__(self, clauses, **kw) -> None: ...
    def self_group(self, against: Optional[_Any] = ...): ...

CONTAINS = ...  # type: _Any
CONTAINED_BY = ...  # type: _Any
OVERLAP = ...  # type: _Any

class ARRAY(SchemaEventTarget, sqltypes.ARRAY):
    class Comparator(sqltypes.ARRAY.Comparator):
        def contains(self, other, **kwargs): ...
        def contained_by(self, other): ...
        def overlap(self, other): ...
    comparator_factory = ...  # type: _Any
    item_type = ...  # type: _Any
    as_tuple = ...  # type: _Any
    dimensions = ...  # type: _Any
    zero_indexes = ...  # type: _Any
    def __init__(self, item_type, as_tuple: bool = ..., dimensions: Optional[_Any] = ..., zero_indexes: bool = ...) -> None: ...
    @property
    def hashable(self): ...
    @property
    def python_type(self): ...
    def compare_values(self, x, y): ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
