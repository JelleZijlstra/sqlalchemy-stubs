# Stubs for sqlalchemy.util.compat (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Text
from collections import namedtuple
from inspect import getfullargspec as inspect_getfullargspec
from io import BytesIO as byte_buffer
from inspect import getargspec as inspect_getfullargspec
from cStringIO import StringIO as byte_buffer
from itertools import izip_longest as zip_longest
from operator import attrgetter as dottedgetter

py36 = ...  # type: Any
py33 = ...  # type: Any
py32 = ...  # type: Any
py3k = ...  # type: Any
py2k = ...  # type: Any
py265 = ...  # type: Any
jython = ...  # type: Any
pypy = ...  # type: Any
win32 = ...  # type: Any
cpython = ...  # type: Any
next = ...  # type: Any
safe_kwarg = ...  # type: Any

ArgSpec = namedtuple('ArgSpec', ['args', 'varargs', 'keywords', 'defaults'])

def inspect_getargspec(func): ...

string_types = ...  # type: Any
binary_types = ...  # type: Any
binary_type = ...  # type: Any
text_type = Text
int_types = ...  # type: Any
iterbytes = ...  # type: Any

def u(s): ...
def ue(s): ...
def b(s): ...

callable = ...  # type: Any

def cmp(a, b): ...

print_ = ...  # type: Any
import_ = ...  # type: Any
itertools_filterfalse = ...  # type: Any
itertools_filter = ...  # type: Any
itertools_imap = ...  # type: Any

def b64encode(x): ...
def b64decode(x): ...

inspect_getargspec = ...  # type: Any
cmp = ...  # type: Any
reduce = ...  # type: Any
b64encode = ...  # type: Any
b64decode = ...  # type: Any
time_func = ...  # type: Any

def reraise(tp, value, tb: Optional[Any] = ..., cause: Optional[Any] = ...): ...
def raise_from_cause(exception, exc_info: Optional[Any] = ...): ...

exec_ = ...  # type: Any

def with_metaclass(meta, *bases): ...
def nested(*managers): ...
