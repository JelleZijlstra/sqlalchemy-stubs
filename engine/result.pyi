from typing import Any, Iterator, List, Mapping, Optional

# Note: The value type `Any` should be a DB API 2 value type once defined
# TODO: See #1037

class RowProxy(Mapping[str, Any]): ...

class ResultProxy(Iterator[RowProxy]):
    def keys(self) -> List[str]: ...
    def close(self) -> None: ...
    def __iter__(self) -> Iterator[RowProxy]: ...
    def fetchall(self) -> Iterator[RowProxy]: ...
    def fetchmany(self, size: Optional[int]=None) -> Iterator[RowProxy]: ...
    def fetchone(self) -> Optional[RowProxy]: ...
    def first(self) -> Optional[RowProxy]: ...

    # Note: The return type `Any` should be a DB API 2 value type once defined
    # TODO: See #1037
    def scalar(self) -> Any: ...

    @property
    def rowcount(self) -> int: ...
