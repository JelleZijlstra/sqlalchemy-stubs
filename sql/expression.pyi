# Stubs for sqlalchemy.sql.expression (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from .functions import func as func, modifier as modifier
from .elements import ClauseElement as ClauseElement, ColumnElement as ColumnElement, not_ as not_, collate as collate, literal_column as literal_column, between as between, literal as literal, outparam as outparam
from .base import ColumnCollection as ColumnCollection
from .selectable import Alias as Alias, Join as Join, Select as Select, Selectable as Selectable, TableClause as TableClause, CompoundSelect as CompoundSelect, FromClause as FromClause, Lateral as Lateral, alias as alias, subquery as subquery, lateral as lateral, TableSample as TableSample, tablesample as tablesample
from .dml import Insert as Insert, Update as Update, Delete as Delete

all_ = ...  # type: Any
any_ = ...  # type: Any
and_ = ...  # type: Any
or_ = ...  # type: Any
bindparam = ...  # type: Any
select = ...  # type: Any
text = ...  # type: Any
table = ...  # type: Any
column = ...  # type: Any
over = ...  # type: Any
within_group = ...  # type: Any
label = ...  # type: Any
case = ...  # type: Any
cast = ...  # type: Any
extract = ...  # type: Any
tuple_ = ...  # type: Any
except_ = ...  # type: Any
except_all = ...  # type: Any
intersect = ...  # type: Any
intersect_all = ...  # type: Any
union = ...  # type: Any
union_all = ...  # type: Any
exists = ...  # type: Any
nullsfirst = ...  # type: Any
nullslast = ...  # type: Any
asc = ...  # type: Any
desc = ...  # type: Any
distinct = ...  # type: Any
type_coerce = ...  # type: Any
null = ...  # type: Any
join = ...  # type: Any
outerjoin = ...  # type: Any
insert = ...  # type: Any
update = ...  # type: Any
delete = ...  # type: Any

# old names for compatibility
_Executable = Executable
_BindParamClause = BindParameter
_Label = Label
_SelectBase = SelectBase
_BinaryExpression = BinaryExpression
_Cast = Cast
_Null = Null
_False = False_
_True = True_
_TextClause = TextClause
_UnaryExpression = UnaryExpression
_Case = Case
_Tuple = Tuple
_Over = Over
_Generative = Generative
_TypeClause = TypeClause
_Extract = Extract
_Exists = Exists
_Grouping = Grouping
_FromGrouping = FromGrouping
_ScalarSelect = ScalarSelect
