from typing import AnyStr

from .base import SchemaEventTarget, DialectKWArgs
from .base import ColumnCollection
from .elements import ClauseElement, ColumnClause, TextClause, \
    ColumnElement
from .selectable import TableClause

from . import visitors

class SchemaItem(SchemaEventTarget, visitors.Visitable): ...

class Table(DialectKWArgs, SchemaItem, TableClause): ...

class Column(SchemaItem, ColumnClause): ...
class ForeignKey(DialectKWArgs, SchemaItem): ...

class _NotAColumnExpr(object): ...
class DefaultGenerator(_NotAColumnExpr, SchemaItem): ...
class ColumnDefault(DefaultGenerator): ...
class Sequence(DefaultGenerator): ...
class FetchedValue(_NotAColumnExpr, SchemaEventTarget): ...
class DefaultClause(FetchedValue): ...
class PassiveDefault(DefaultClause): ...
class Constraint(DialectKWArgs, SchemaItem): ...
class ColumnCollectionMixin(object): ...
class ColumnCollectionConstraint(ColumnCollectionMixin, Constraint): ...
class CheckConstraint(ColumnCollectionConstraint): ...
class ForeignKeyConstraint(ColumnCollectionConstraint): ...
class PrimaryKeyConstraint(ColumnCollectionConstraint): ...
class UniqueConstraint(ColumnCollectionConstraint): ...
class Index(DialectKWArgs, ColumnCollectionMixin, SchemaItem): ...
class MetaData(SchemaItem): ...
class ThreadLocalMetaData(MetaData): ...

def _get_table_key(name: AnyStr, schema: AnyStr): ...
