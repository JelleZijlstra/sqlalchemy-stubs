# Stubs for sqlalchemy.orm.session (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class _SessionClassMethods:
    @classmethod
    def close_all(cls): ...
    @classmethod
    def identity_key(cls, orm_util, *args, **kwargs): ...
    @classmethod
    def object_session(cls, instance): ...

class SessionTransaction:
    session = ... # type: Any
    nested = ... # type: Any
    def __init__(self, session, parent=None, nested=False) -> None: ...
    @property
    def is_active(self): ...
    def connection(self, bindkey, execution_options=None, **kwargs): ...
    def prepare(self): ...
    def commit(self): ...
    def rollback(self, _capture_exception=False): ...
    def close(self, invalidate=False): ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...

class Session(_SessionClassMethods):
    public_methods = ... # type: Any
    identity_map = ... # type: Any
    bind = ... # type: Any
    transaction = ... # type: Any
    hash_key = ... # type: Any
    autoflush = ... # type: Any
    autocommit = ... # type: Any
    expire_on_commit = ... # type: Any
    twophase = ... # type: Any
    def __init__(self, bind=None, autoflush=True, expire_on_commit=True, _enable_transaction_accounting=True, autocommit=False, twophase=False, weak_identity_map=True, binds=None, extension=None, info=None, query_cls=...) -> None: ...
    connection_callable = ... # type: Any
    def info(self): ...
    def begin(self, subtransactions=False, nested=False): ...
    def begin_nested(self): ...
    def rollback(self): ...
    def commit(self): ...
    def prepare(self): ...
    def connection(self, mapper=None, clause=None, bind=None, close_with_result=False, execution_options=None, **kw): ...
    def execute(self, clause, params=None, mapper=None, bind=None, **kw): ...
    def scalar(self, clause, params=None, mapper=None, bind=None, **kw): ...
    def close(self): ...
    def invalidate(self): ...
    def expunge_all(self): ...
    def bind_mapper(self, mapper, bind): ...
    def bind_table(self, table, bind): ...
    def get_bind(self, mapper=None, clause=None): ...
    def query(self, *entities, **kwargs): ...
    @property
    def no_autoflush(self): ...
    def refresh(self, instance, attribute_names=None, lockmode=None): ...
    def expire_all(self): ...
    def expire(self, instance, attribute_names=None): ...
    def prune(self): ...
    def expunge(self, instance): ...
    def add(self, instance, _warn=True): ...
    def add_all(self, instances): ...
    def delete(self, instance): ...
    def merge(self, instance, load=True): ...
    def enable_relationship_loading(self, obj): ...
    def __contains__(self, instance): ...
    def __iter__(self): ...
    def flush(self, objects=None): ...
    def bulk_save_objects(self, objects, return_defaults=False, update_changed_only=True): ...
    def bulk_insert_mappings(self, mapper, mappings, return_defaults=False): ...
    def bulk_update_mappings(self, mapper, mappings): ...
    def is_modified(self, instance, include_collections=True, passive=True): ...
    @property
    def is_active(self): ...
    @property
    def dirty(self): ...
    @property
    def deleted(self): ...
    @property
    def new(self): ...

class sessionmaker(_SessionClassMethods):
    kw = ... # type: Any
    class_ = ... # type: Any
    def __init__(self, bind=None, class_=..., autoflush=True, autocommit=False, expire_on_commit=True, info=None, **kw) -> None: ...
    def __call__(self, **local_kw): ...
    def configure(self, **new_kw): ...

# Names in __all__ with no definition:
#   SessionExtension
