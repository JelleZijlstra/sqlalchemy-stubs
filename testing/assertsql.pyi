# Stubs for sqlalchemy.testing.assertsql (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from ..engine.default import DefaultDialect as DefaultDialect

class AssertRule:
    is_consumed = ...  # type: bool
    errormessage = ...  # type: Any
    consume_statement = ...  # type: bool
    def process_statement(self, execute_observed): ...
    def no_more_statements(self): ...

class SQLMatchRule(AssertRule): ...

class CursorSQL(SQLMatchRule):
    consume_statement = ...  # type: bool
    statement = ...  # type: Any
    params = ...  # type: Any
    def __init__(self, statement, params: Optional[Any] = ...) -> None: ...
    errormessage = ...  # type: Any
    is_consumed = ...  # type: bool
    def process_statement(self, execute_observed): ...

class CompiledSQL(SQLMatchRule):
    statement = ...  # type: Any
    params = ...  # type: Any
    dialect = ...  # type: Any
    def __init__(self, statement, params: Optional[Any] = ..., dialect: str = ...) -> None: ...
    is_consumed = ...  # type: bool
    errormessage = ...  # type: Any
    def process_statement(self, execute_observed): ...

class RegexSQL(CompiledSQL):
    regex = ...  # type: Any
    orig_regex = ...  # type: Any
    params = ...  # type: Any
    dialect = ...  # type: str
    def __init__(self, regex, params: Optional[Any] = ...) -> None: ...

class DialectSQL(CompiledSQL): ...

class CountStatements(AssertRule):
    count = ...  # type: Any
    def __init__(self, count) -> None: ...
    def process_statement(self, execute_observed): ...
    def no_more_statements(self): ...

class AllOf(AssertRule):
    rules = ...  # type: Any
    def __init__(self, *rules) -> None: ...
    is_consumed = ...  # type: bool
    errormessage = ...  # type: Any
    def process_statement(self, execute_observed): ...

class Or(AllOf):
    is_consumed = ...  # type: bool
    errormessage = ...  # type: Any
    def process_statement(self, execute_observed): ...

class SQLExecuteObserved:
    context = ...  # type: Any
    clauseelement = ...  # type: Any
    parameters = ...  # type: Any
    statements = ...  # type: Any
    def __init__(self, context, clauseelement, multiparams, params) -> None: ...

class SQLCursorExecuteObserved: ...

class SQLAsserter:
    accumulated = ...  # type: Any
    def __init__(self) -> None: ...
    def assert_(self, *rules): ...

def assert_engine(engine): ...
