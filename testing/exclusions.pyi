# Stubs for sqlalchemy.testing.exclusions (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from ..util import decorator as decorator

def skip_if(predicate, reason: Optional[Any] = ...): ...
def fails_if(predicate, reason: Optional[Any] = ...): ...

class compound:
    fails = ...  # type: Any
    skips = ...  # type: Any
    tags = ...  # type: Any
    def __init__(self) -> None: ...
    def __add__(self, other): ...
    def add(self, *others): ...
    def not_(self): ...
    @property
    def enabled(self): ...
    def enabled_for_config(self, config): ...
    def matching_config_reasons(self, config): ...
    def include_test(self, include_tags, exclude_tags): ...
    def __call__(self, fn): ...
    def fail_if(self): ...

def requires_tag(tagname): ...
def tags(tagnames): ...
def only_if(predicate, reason: Optional[Any] = ...): ...
def succeeds_if(predicate, reason: Optional[Any] = ...): ...

class Predicate:
    @classmethod
    def as_predicate(cls, predicate, description: Optional[Any] = ...): ...

class BooleanPredicate(Predicate):
    value = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, value, description: Optional[Any] = ...) -> None: ...
    def __call__(self, config): ...

class SpecPredicate(Predicate):
    db = ...  # type: Any
    op = ...  # type: Any
    spec = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, db, op: Optional[Any] = ..., spec: Optional[Any] = ..., description: Optional[Any] = ...) -> None: ...
    def __call__(self, config): ...

class LambdaPredicate(Predicate):
    lambda_ = ...  # type: Any
    args = ...  # type: Any
    kw = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, lambda_, description: Optional[Any] = ..., args: Optional[Any] = ..., kw: Optional[Any] = ...) -> None: ...
    def __call__(self, config): ...

class NotPredicate(Predicate):
    predicate = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, predicate, description: Optional[Any] = ...) -> None: ...
    def __call__(self, config): ...

class OrPredicate(Predicate):
    predicates = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, predicates, description: Optional[Any] = ...) -> None: ...
    def __call__(self, config): ...

def db_spec(*dbs): ...
def open(): ...
def closed(): ...
def fails(reason: Optional[Any] = ...): ...
def future(fn, *arg): ...
def fails_on(db, reason: Optional[Any] = ...): ...
def fails_on_everything_except(*dbs): ...
def skip(db, reason: Optional[Any] = ...): ...
def only_on(dbs, reason: Optional[Any] = ...): ...
def exclude(db, op, spec, reason: Optional[Any] = ...): ...
def against(config, *queries): ...
